#include <stdio.h>
#include <ctype.h>

#define n 10 
#define postfixsize 20 

int stack[n];
int top = -1; 
void push(int item)
{

    if (top >= n - 1) {
        printf("stack over flow");
        return;
    }
    else {
        top = top + 1;
        stack[top] = item;
    }
}

int pop()
{
    int item;
    if (top < 0) {
        printf("stack under flow!!");
    }
    else {
        item = stack[top];
        top = top - 1;
        return item;
    }
}

void evalpf(char postfix[])
{

    int i;
    char ch;
    int val;
    int a, b;

    
    for (i = 0; postfix[i] != '\n'; i++) {
        ch = postfix[i];
        if (isdigit(ch)) {
            push(ch - '0');
        }
        else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
          
            a = pop();
            b = pop();

            switch (ch) 
            {
            case '*':
                val = b * a;
                break;

            case '/':
                val = b / a;
                break;

            case '+':
                val = b + a;
                break;

            case '-':
                val = b - a;
                break;
            }

            push(val);
        }
    }
    printf(" \nResult of expression evaluation : %d \n", pop());
}

int main()
{

    int i;

   
    char postfix[postfixsize];
    printf("NOTE: *There are 4 operations(*, /, +, -) in an expression.\n*Operand is single digit only.\n");
    printf("Enter postfix expression,\nPress 'ENTER' for end expression : ");


    for (i = 0; i <= postfixsize - 1; i++) {
        scanf("%c", &postfix[i]);

        if (postfix[i] == '\n') 
        {
            break;
        } 
    }


    evalpf(postfix);

    return 0;
}
