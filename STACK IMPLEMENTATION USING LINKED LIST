#include<stdio.h>
#include<stdlib.h>
#define n 5
struct node
{
	int data;
	struct node*next;

};
struct node *head=NULL,*temp;
void push();
void pop();
void display();
int isempty();
int isfull();
void findtop();
int i=1,count=0,ch=1;
void main()
{
		int c;

		head=(struct node*)malloc(sizeof(struct node));
		if(head==NULL)
		{
		printf("unable to allocate memory");
		}
		do
		{
		printf("\nenter your choice: 1.PUSH 2.POP 3.DISPLAY 4.FIND TOP 5.EXIT: ");
		scanf("%d",&c);
		int s;

		switch(c)
		{
			case 1:
				push();
				break;
			case 2:
					pop();
					break;
			case 3:
					display();
					break;
			case 4:
					findtop();
					break;
			case 5:
					exit(0);
			default:
				printf("invalid choice");
				printf("TRY AGAIN");
		}
}while(c!=0);

}
void push()
{
 	do{
 	
		struct node *newnode;
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("enter element to push:");
		scanf("%d",&newnode->data);

		newnode->next=head;

		head=newnode;
		count++;
		
		printf("Do you want to continue?:(1(yes)/0(no))");
		scanf("%d",&ch);
	}while(ch==1 && count<n);
	if(isfull()){
			printf("STACK SIZE EXCEEDED!!\n OVERFLOW!!\n");
	}
}
void pop()
{
	struct node *temp;
	if(isempty())
	{
		printf("stack is empty");
	}
	else
	{
		printf("popped element is :%d\n",head->data);
		temp=head;
		head=head->next;
	count--;
	free(temp);
	}
}
void display()
{
	struct node *temp;
	temp=head;
	if(isempty())
	{
		printf("nothing to show");
	}
	while(temp->next!=NULL)
	{
		printf("%d\n",temp->data);
		temp=temp->next;
	}
	
}
int isempty()
{
	if(count==0){
		return 1;
	}
	else{
		return 0;}
}
int isfull()
{
	if(count>=n){
			return 1;
	}	
	else
		return 0;
}	
void findtop()
{				
				struct node *temp;
				/*int p;
				temp=head;
				if(isempty()){
					printf("Stack empty!!");
				}
				else{
					while(temp->next!=NULL)
					{
						
				      p=temp->data;
				      temp=temp->next;
					}
				*/
				printf("\nTop element in stack is:%d",head->data);
				printf("\nTop position:%d",count);
			
}

